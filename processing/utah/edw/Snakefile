#configfile: "config/all_neoseq_config.yaml"
#configfile: "config/select_neoseq_config.yaml"
#configfile: "config/all_controls_config.yaml"
configfile: "config/select_controls_config.yaml"

import pandas as pd
master = pd.read_table(config["master"]).set_index("mrn", drop=False)
selected = master.loc[(master["edw_exists"] == 1) & (master["edw_junk"] != 1)]


rule all:
	input:
		#expand("output/{project}/edw2json/{patient}.json", patient=selected["mrn"].tolist(), project=config["project_id"])
		expand("output/{project}/clix/{patient}_clix.tsv", patient=selected["mrn"].tolist(), project=config["project_id"])
		#expand("output/{project}/clix2mpse/{patient}_clix4mpse.tsv", patient=selected["mrn"].tolist(), project=config["project_id"])
		#expand("output/{project}/mpse/{patient}_mpse_predictions.tsv", patient=selected["mrn"].tolist(), project=config["project_id"])

rule edw2json:
	output:
		"output/{project}/edw2json/{patient}.json"
	log:
		"output/{project}/logs/edw2json/{patient}.log"
	benchmark:
		"output/{project}/benchmarks/edw2json/{patient}.txt"
	params:
		sql=config["sql_script"]
	shell:
		"python3 ./bin/neoseq2clix.py "
		"-s {params.sql} "
		"-p {wildcards.patient} "
		"{output} "
		"2> {log}"

rule clix:
	input:
		"output/{project}/edw2json/{patient}.json"
	output:
		"output/{project}/clix/{patient}_clix.tsv"
	log:
		"output/{project}/logs/clix/{patient}_clix.log"
	benchmark:
		"output/{project}/benchmarks/clix/{patient}_clix.txt"
	params:
		clinithink=config["clinithink"],
		secret=config["apisecret"]
	shell:
		"python3 {params.clinithink}/bin/rapid_clix2.py "
		"-d {input} "
		"-s {params.secret} "
		"--abstractions "
		"{output} "
		"2> {log}"

rule clix2mpse:
	input:
		"output/{project}/clix/{patient}_clix.tsv"
	output:
		"output/{project}/clix2mpse/{patient}_clix4mpse.tsv"
	log:
		"output/{project}/logs/clix2mpse/{patient}_clix2mpse.log"
	benchmark:
		"output/{project}/benchmarks/clix2mpse/{patient}_clix2mpse.txt"
	params:
		master=config["master"]
	shell:
		"python3 bin/clix2mpse.py "
		"-d {input} "
		"--NeoSeq "
		"-M {params.master} "
		"--timestamps "
		"{output} "
		"2> {log}"

rule mpse:
	input:
		"output/{project}/clix2mpse/{patient}_clix4mpse.tsv"
	output:
		"output/{project}/mpse/{patient}_mpse_predictions.tsv"
	log:
		"output/{project}/logs/mpse/{patient}_mpse.log"
	benchmark:
		"output/{project}/benchmarks/mpse/{patient}_mpse.txt"
	params:
		mpse=config["mpse"]
	shell:
		"python3 {params.mpse}/bin/mpse.py "
		"-m {config[model]} "
		"-p {input} "
		"--timestamps "
		"-o output/{wildcards.project}/mpse "
		"> {output} "
		"2> {log}"
